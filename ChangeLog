== 0.8 August 25 2013

  * Split Libanius into two projects:
   libanius - data model, core processing, and a Console UI
   libanius-android - Android UI, using libanius as a library JAR


== 0.741 August 10 2013

  * Eliminated some mutable state (Dictionary) that was causing a problem.


== 0.74 August 10 2013

  * Fix bugs around range search updating.


== 0.73 August 6 2013

  * Cleanup, including improved error handling with Try.


== 0.72 August 4 2013

  * Dictionary feature re-introduced in the OptionsScreen.


== 0.7 July 29 2013

  * New OptionsScreen to allow selection of QuizGroups (i.e. wmg's) before the QuizScreen.

  * Dictionary feature temporarily suppressed.


== 0.65 July 18 2013

  * Split serialized quiz into separate .wmg files to allow parallel access and hybrid quizzes.

  * Bugfixes and removal of mutable state.


== 0.62 July 11 2013

  * Moved development from Scala 2.9.2 to 2.10.2.

  * Changed Android interface to use Scala Futures rather than Android AsyncTasks.


== 0.6  July 3 2013

  * Converted core types to persistent data structures.

  * Implemented lazy parsing (using Stream and a Lazy Load Proxy with an implicit conversion)
    to ensure the app is quickly available to the user on startup.

  * Removed support for XML quiz format.

  * Changed static properties to a configuration object using com.typesafe.config.


== 0.51  May 29 2013

 * Cleaned up the data a bit, and set the minimum Android API level to Ice Cream Sandwich.


== 0.5  July 20 2012

 * Added a dictionary screen, so that words can be looked up and added to the 
  (front of the) quiz by the user.
 
 
== 0.4  June 4 2012

 * Removed performance bottlenecks, allowing Libanius to work comfortably with 20,000 quiz items, 
  not just 1,000:

  1. Experimented with various collections to find the fastest ones. E.g. the Java HashMap 
    is faster than the Scala mutable HashMap 
  2. For persistence, moved from using XML (very slow on Android) to a custom format. 
    (Also considered using SQLite, but the paradigm shift for this app would be too great.)
  3. Parsing the custom format uses Android's own StringSplitter rather than the slow String.split()
  4. The writing of the custom format uses a single StringBuilder which is passed to all model objects.


== 0.3  May 2012

 * Overhauled the Android GUI to a multiple choice format


== 0.2  late 2011

 * Quiz functionality in Scala on Android


== 0.1  mid-2011

 * Quiz functionality in Scala on a desktop